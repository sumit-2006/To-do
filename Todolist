<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do List</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }

        #task-input {
            width: 50%;
            padding: 10px;
            font-size: 18px;
        }

        #add-task-btn {
            background-color: #4CAF50;
            color: #fff;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        #task-list {
            list-style: none;
            padding: 0;
            margin: 20px 0;
        }

        .task {
            padding: 10px;
            border-bottom: 1px solid #ccc;
        }

        .task:last-child {
            border-bottom: none;
        }

        .completed {
            text-decoration: line-through;
        }
    </style>
</head>
<body>
    <h1>To-Do List</h1>
    <input type="text" id="task-input" placeholder="Add new task">
    <button id="add-task-btn">Add Task</button>
    <ul id="task-list"></ul>

    <script>
        // Get the task input field, add task button, and task list
        const taskInput = document.getElementById('task-input');
        const addTaskBtn = document.getElementById('add-task-btn');
        const taskList = document.getElementById('task-list');

        // Initialize an empty task list
        let tasks = [];

        // Check if there are tasks in local storage
        if (localStorage.getItem('tasks')) {
            tasks = JSON.parse(localStorage.getItem('tasks'));
        }

        // Function to add a new task
        function addTask(task) {
            // Create a new task object
            const taskObj = {
                id: Date.now(),
                text: task,
                completed: false
            };

            // Add the task to the task list
            tasks.push(taskObj);

            // Save the tasks to local storage
            localStorage.setItem('tasks', JSON.stringify(tasks));

            // Clear the input field
            taskInput.value = '';

            // Render the task list
            renderTaskList();
        }

        // Function to render the task list
        function renderTaskList() {
            // Clear the task list
            taskList.innerHTML = '';

            // Loop through the tasks and create list items
            tasks.forEach((task) => {
                const taskListItem = document.createElement('li');
                taskListItem.className = 'task';
                taskListItem.textContent = task.text;

                // Add a checkbox to mark tasks as completed
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.checked = task.completed;
                taskListItem.appendChild(checkbox);

                // Add a delete button
                const deleteBtn = document.createElement('button');
                deleteBtn.textContent = 'Delete';
                taskListItem.appendChild(deleteBtn);

                // Add an event listener to the delete button
                deleteBtn.addEventListener('click', () => {
                    deleteTask(task.id);
                });

                // Add an event listener to the checkbox
                checkbox.addEventListener('click', () => {
                    toggleTaskCompletion(task.id);
                });

                taskList.appendChild(taskListItem);
            });
        }

        // Function to delete a task
        function deleteTask(id) {
            // Find the task with the matching ID and remove it from the task list
            tasks = tasks.filter((task) => task.id!== id);

            // Save the updated task list to local storage
            localStorage.setItem('tasks', JSON.stringify(tasks));

            // Render the task list
            renderTaskList();
        }

        // Function to toggle task completion
        function toggleTaskCompletion(id) {
            // Find the task with the matching ID and toggle its completion status
            const task = tasks.find((task) => task.id === id);
            task.completed =!task.completed;

            // Save the updated task list to local storage
            localStorage.setItem('tasks', JSON.stringify(tasks));

            // Render the task list
            renderTaskList();
        }

        // Add an event listener to the add task button
        addTaskBtn.addEventListener('click', () => {
            addTask(taskInput.value);
        });

        // Render the task list initially
        renderTaskList();
    </script>
</body>
</html>
